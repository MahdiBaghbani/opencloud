// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/opencloud-eu/opencloud/services/search/pkg/search"
	mock "github.com/stretchr/testify/mock"
)

// NewBatchOperator creates a new instance of BatchOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchOperator {
	mock := &BatchOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BatchOperator is an autogenerated mock type for the BatchOperator type
type BatchOperator struct {
	mock.Mock
}

type BatchOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchOperator) EXPECT() *BatchOperator_Expecter {
	return &BatchOperator_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type BatchOperator
func (_mock *BatchOperator) Delete(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BatchOperator_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type BatchOperator_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *BatchOperator_Expecter) Delete(id interface{}) *BatchOperator_Delete_Call {
	return &BatchOperator_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *BatchOperator_Delete_Call) Run(run func(id string)) *BatchOperator_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BatchOperator_Delete_Call) Return(err error) *BatchOperator_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BatchOperator_Delete_Call) RunAndReturn(run func(id string) error) *BatchOperator_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function for the type BatchOperator
func (_mock *BatchOperator) Move(rootID string, parentID string, location string) error {
	ret := _mock.Called(rootID, parentID, location)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(rootID, parentID, location)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BatchOperator_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type BatchOperator_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - rootID string
//   - parentID string
//   - location string
func (_e *BatchOperator_Expecter) Move(rootID interface{}, parentID interface{}, location interface{}) *BatchOperator_Move_Call {
	return &BatchOperator_Move_Call{Call: _e.mock.On("Move", rootID, parentID, location)}
}

func (_c *BatchOperator_Move_Call) Run(run func(rootID string, parentID string, location string)) *BatchOperator_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *BatchOperator_Move_Call) Return(err error) *BatchOperator_Move_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BatchOperator_Move_Call) RunAndReturn(run func(rootID string, parentID string, location string) error) *BatchOperator_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function for the type BatchOperator
func (_mock *BatchOperator) Purge(id string, onlyDeleted bool) error {
	ret := _mock.Called(id, onlyDeleted)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = returnFunc(id, onlyDeleted)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BatchOperator_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type BatchOperator_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - id string
//   - onlyDeleted bool
func (_e *BatchOperator_Expecter) Purge(id interface{}, onlyDeleted interface{}) *BatchOperator_Purge_Call {
	return &BatchOperator_Purge_Call{Call: _e.mock.On("Purge", id, onlyDeleted)}
}

func (_c *BatchOperator_Purge_Call) Run(run func(id string, onlyDeleted bool)) *BatchOperator_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BatchOperator_Purge_Call) Return(err error) *BatchOperator_Purge_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BatchOperator_Purge_Call) RunAndReturn(run func(id string, onlyDeleted bool) error) *BatchOperator_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function for the type BatchOperator
func (_mock *BatchOperator) Push() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BatchOperator_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type BatchOperator_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
func (_e *BatchOperator_Expecter) Push() *BatchOperator_Push_Call {
	return &BatchOperator_Push_Call{Call: _e.mock.On("Push")}
}

func (_c *BatchOperator_Push_Call) Run(run func()) *BatchOperator_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BatchOperator_Push_Call) Return(err error) *BatchOperator_Push_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BatchOperator_Push_Call) RunAndReturn(run func() error) *BatchOperator_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type BatchOperator
func (_mock *BatchOperator) Restore(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BatchOperator_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type BatchOperator_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - id string
func (_e *BatchOperator_Expecter) Restore(id interface{}) *BatchOperator_Restore_Call {
	return &BatchOperator_Restore_Call{Call: _e.mock.On("Restore", id)}
}

func (_c *BatchOperator_Restore_Call) Run(run func(id string)) *BatchOperator_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BatchOperator_Restore_Call) Return(err error) *BatchOperator_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BatchOperator_Restore_Call) RunAndReturn(run func(id string) error) *BatchOperator_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type BatchOperator
func (_mock *BatchOperator) Upsert(id string, r search.Resource) error {
	ret := _mock.Called(id, r)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, search.Resource) error); ok {
		r0 = returnFunc(id, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BatchOperator_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type BatchOperator_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - id string
//   - r search.Resource
func (_e *BatchOperator_Expecter) Upsert(id interface{}, r interface{}) *BatchOperator_Upsert_Call {
	return &BatchOperator_Upsert_Call{Call: _e.mock.On("Upsert", id, r)}
}

func (_c *BatchOperator_Upsert_Call) Run(run func(id string, r search.Resource)) *BatchOperator_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 search.Resource
		if args[1] != nil {
			arg1 = args[1].(search.Resource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BatchOperator_Upsert_Call) Return(err error) *BatchOperator_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BatchOperator_Upsert_Call) RunAndReturn(run func(id string, r search.Resource) error) *BatchOperator_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
