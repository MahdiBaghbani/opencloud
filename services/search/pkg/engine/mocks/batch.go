// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/opencloud-eu/opencloud/services/search/pkg/engine"
	mock "github.com/stretchr/testify/mock"
)

// NewBatch creates a new instance of Batch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Batch {
	mock := &Batch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Batch is an autogenerated mock type for the Batch type
type Batch struct {
	mock.Mock
}

type Batch_Expecter struct {
	mock *mock.Mock
}

func (_m *Batch) EXPECT() *Batch_Expecter {
	return &Batch_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type Batch
func (_mock *Batch) Delete(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Batch_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *Batch_Expecter) Delete(id interface{}) *Batch_Delete_Call {
	return &Batch_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *Batch_Delete_Call) Run(run func(id string)) *Batch_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Batch_Delete_Call) Return(err error) *Batch_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Delete_Call) RunAndReturn(run func(id string) error) *Batch_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// End provides a mock function for the type Batch
func (_mock *Batch) End() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for End")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_End_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'End'
type Batch_End_Call struct {
	*mock.Call
}

// End is a helper method to define mock.On call
func (_e *Batch_Expecter) End() *Batch_End_Call {
	return &Batch_End_Call{Call: _e.mock.On("End")}
}

func (_c *Batch_End_Call) Run(run func()) *Batch_End_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_End_Call) Return(err error) *Batch_End_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_End_Call) RunAndReturn(run func() error) *Batch_End_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function for the type Batch
func (_mock *Batch) Move(id string, parentid string, target string) error {
	ret := _mock.Called(id, parentid, target)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(id, parentid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type Batch_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - id string
//   - parentid string
//   - target string
func (_e *Batch_Expecter) Move(id interface{}, parentid interface{}, target interface{}) *Batch_Move_Call {
	return &Batch_Move_Call{Call: _e.mock.On("Move", id, parentid, target)}
}

func (_c *Batch_Move_Call) Run(run func(id string, parentid string, target string)) *Batch_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Batch_Move_Call) Return(err error) *Batch_Move_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Move_Call) RunAndReturn(run func(id string, parentid string, target string) error) *Batch_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function for the type Batch
func (_mock *Batch) Purge(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type Batch_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - id string
func (_e *Batch_Expecter) Purge(id interface{}) *Batch_Purge_Call {
	return &Batch_Purge_Call{Call: _e.mock.On("Purge", id)}
}

func (_c *Batch_Purge_Call) Run(run func(id string)) *Batch_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Batch_Purge_Call) Return(err error) *Batch_Purge_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Purge_Call) RunAndReturn(run func(id string) error) *Batch_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type Batch
func (_mock *Batch) Restore(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type Batch_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - id string
func (_e *Batch_Expecter) Restore(id interface{}) *Batch_Restore_Call {
	return &Batch_Restore_Call{Call: _e.mock.On("Restore", id)}
}

func (_c *Batch_Restore_Call) Run(run func(id string)) *Batch_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Batch_Restore_Call) Return(err error) *Batch_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Restore_Call) RunAndReturn(run func(id string) error) *Batch_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type Batch
func (_mock *Batch) Upsert(id string, r engine.Resource) error {
	ret := _mock.Called(id, r)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, engine.Resource) error); ok {
		r0 = returnFunc(id, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Batch_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - id string
//   - r engine.Resource
func (_e *Batch_Expecter) Upsert(id interface{}, r interface{}) *Batch_Upsert_Call {
	return &Batch_Upsert_Call{Call: _e.mock.On("Upsert", id, r)}
}

func (_c *Batch_Upsert_Call) Run(run func(id string, r engine.Resource)) *Batch_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 engine.Resource
		if args[1] != nil {
			arg1 = args[1].(engine.Resource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Batch_Upsert_Call) Return(err error) *Batch_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Upsert_Call) RunAndReturn(run func(id string, r engine.Resource) error) *Batch_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
